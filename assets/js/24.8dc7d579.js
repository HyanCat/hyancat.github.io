(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{576:function(t,a,s){"use strict";s.r(a);var n=s(11),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("探究 UIAppearance 的原理，活学活用 UIAppearance。")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("在 iOS 开发中经常会用到诸如")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UINavigationBar appearance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("barTintColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这种用来全局设置某个控件的属性的代码。表面上看，appearance 的作用就是统一外观设置，那么它的原理究竟是什么呢？它里面究竟干了些什么事？怎么用才是比较正确的用法呢？")]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("p",[s("code",[t._v("UIApearance")]),t._v(" 实际上是一个协议（Protocol），我们可以用它来获取一个类的外观代理（Appearance Proxy）。该协议需实现这几个方法：")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("appearance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("appearanceWhenContainedInInstancesOfClasses"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSArray"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Class "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("UIAppearanceContainer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("containerTypes "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_AVAILABLE_IOS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("_0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 详细方法见 UIKit/UIAppearance.h")]),t._v("\n")])])]),s("p",[t._v("另外一个与之对应的协议是 "),s("code",[t._v("UIAppearanceContainer")]),t._v("，该协议并没有任何约定方法。因为它只是作为一个容器。")]),t._v(" "),s("p",[t._v("常见的，如 UIView 实现了 "),s("code",[t._v("UIAppearance")]),t._v(" 这两种协议，既可以获取外观代理，也可以作为外观容器。\n而 UIViewController 则是仅实现了 "),s("code",[t._v("UIAppearanceContainer")]),t._v(" 协议，很简单，它本身是控制器而不是 view，作为容器，为 UIView 等服务。\n事实上，在使用中，我们所有的视图类都继承自 UIView，UIView 的容器也基本上是 UIView 或 UIController，基本不需要自己去实现这两个协议。对于需要支持使用 appearance 来设置的属性，在属性后增加 "),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 宏声明即可。\n文档中也有解释 "),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 用来标记属性用于外观代理，支持哪些类型等等。")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v(" To participate "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the appearance proxy API"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag your appearance property selectors "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" your header with UI_APPEARANCE_SELECTOR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n Appearance property selectors must be of the form"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setProperty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PropertyType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("property forAxis1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IntegerType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("axis1 axis2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IntegerType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("axis2 axisN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IntegerType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("axisN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PropertyType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("propertyForAxis1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IntegerType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("axis1 axis2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IntegerType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("axis2 axisN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IntegerType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("axisN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n You may have no axes or as many as you like "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" any property"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" PropertyType may be any standard iOS type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NSInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NSUInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CGFloat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CGPoint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CGSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CGRect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UIEdgeInsets or UIOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" IntegerType must be either NSInteger or NSUInteger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" we will throw an exception "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" other types are used "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the axes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("h2",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),s("p",[t._v("写一个简单的小 Demo，自定义 CardView，有两个 subview: headerView 和 footerView，声明 2 个属性：")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strong"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" UIColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("headerColor UI_APPEARANCE_SELECTOR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strong"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" UIColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bodyColor UI_APPEARANCE_SELECTOR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Setter 方法都加断点调试：")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setHeaderColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("headerColor\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _headerColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headerColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _headerColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setBodyColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UIColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("bodyColor\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _bodyColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bodyColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bodyView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _bodyColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在 ViewController 的 view 中加一个按钮，点击则创建并添加 CardView，每行代码均加断点：")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IBAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("createButtonTouched"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sender\n\tCardView "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cardView "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CardView alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" initWithFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CGRectMake")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("view addSubview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("cardView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcardView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UIColor greenColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("另外，在较早的时候，添加 appearance 设置：")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CardView appearance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UIColor redColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CardView appearance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bodyColor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("UIColor orangeColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("运行发现，在通过 appearance 设置属性的时候，并没有调用 setter 方法，由此可知 appearance 并不会生成实例，立即赋值。当 cardView 被添加到主视图（即视图树）中去的时候，才依次调用两个 setter 方法，调用栈如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pico.oss-cn-hangzhou.aliyuncs.com/blog/hf5r9.png",alt:"ios_uiappearance_image_1"}})]),t._v(" "),s("p",[t._v("从 15 至 11 可以看出确实是加入到视图树中才触发的，从 7 至 2 可以基本猜测出，appearance 设置的属性，都以 Invocation 的形式存储到 _UIApperance 类中（事实上 _UIApperance 类中就有一个 _appearanceInvocations 数组），等到视图树 performUpdates 的时候，会去检查有没有相关的属性设置，有则 invoke。(这里可以看看 NSInvocation)")]),t._v(" "),s("p",[t._v("紧接着，它进入了 bodyColor 的 setter")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pico.oss-cn-hangzhou.aliyuncs.com/blog/l57zg.png",alt:"ios_uiappearance_image_2"}})]),t._v(" "),s("p",[t._v("然后，当手动设置属性的时候，它是直接进入 setter 的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pico.oss-cn-hangzhou.aliyuncs.com/blog/7pggk.png",alt:"ios_uiappearance_image_3"}})]),t._v(" "),s("p",[t._v("到这里，基本清晰了。")]),t._v(" "),s("p",[t._v("每一个实现 UIAppearance 协议的类，都会有一个 _UIApperance 实例，保存着这个类通过 appearance 设置属性的 invocations，在该类被添加或应用到视图树上的时候，它会检查并调用这些属性设置。这样就实现了让所有该类的实例都自动统一属性。")]),t._v(" "),s("p",[t._v("当然，如果后面又手动设置了属性，肯定会覆盖了。从上面可以知道，appearance 生效是在被添加到视图树时，所以，在此之后设置 appearance，则不会起作用，而在手动设置属性之后被添加到视图树上，手动设置的会被覆盖。appearance 只是起到一个代理作用，在特定的时机，让代理替所有实例做同样的事。")]),t._v(" "),s("p",[t._v("尝试一下，去掉 "),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 宏声明，然后通过 appearance 设置属性，会怎么样呢？\n测试后发现，结果是一样的。也就是说 "),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 并没有干什么事，正如文档所说，只是 tag 一下。看 "),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 宏定义如下")]),t._v(" "),s("div",{staticClass:"language-ObjectiveC extra-class"},[s("pre",{pre:!0,attrs:{class:"language-objectivec"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__attribute__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("annotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ui_appearance_selector"')]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n")])])]),s("p",[t._v("由此可见，"),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 真的啥都没干。。但是出于代码可读性，还是在需要的地方加上它。")]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("一般地，UIView 的子类，和直接调用 setter 一样，直接通过 appearance 对其设置属性，当然时机在被添加到视图树之前。")])]),t._v(" "),s("li",[s("p",[t._v("建议在 appearance 的属性后加上 "),s("code",[t._v("UI_APPEARANCE_SELECTOR")]),t._v(" 宏。")])]),t._v(" "),s("li",[s("p",[t._v("复杂需求可以考虑 UIAppearance 协议里另外几个方法来实现。")])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ul",[s("li",[t._v("http://nshipster.com/uiappearance/")])])])}),[],!1,null,null,null);a.default=e.exports}}]);